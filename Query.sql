-- ===============================================
-- Database Schema Creation for Pharmacy Management System
-- ===============================================

-- Creating tables
-- ===============================================

-- Main tables
-- ===============================================

-- Table: Manufacturers
CREATE TABLE MANUFACTURERS (
    MANUFACTURER_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    NAME VARCHAR2(100) NOT NULL UNIQUE,
    CONTACT VARCHAR2(20),
    EMAIL VARCHAR2(100) UNIQUE
);

-- Table: Drug_Categories
CREATE TABLE DRUG_CATEGORIES (
    CATEGORY_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    NAME VARCHAR2(50) NOT NULL UNIQUE,
    STORAGE_REQUIREMENT VARCHAR2(100)
);

-- Table: Drugs
CREATE TABLE DRUGS (
    DRUG_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    NAME VARCHAR2(100) NOT NULL UNIQUE,
    CATEGORY_ID NUMBER NOT NULL, -- Foreign Key
    MANUFACTURER_ID NUMBER NOT NULL, -- Foreign Key
    EXPIRY_DATE DATE NOT NULL,
    UNIT_PRICE NUMBER(10, 2) NOT NULL CHECK ( UNIT_PRICE > 0 ),
    STOCK_QUANTITY NUMBER NOT NULL CHECK ( STOCK_QUANTITY >= 0 )
);

CREATE INDEX IDX_DRUG_EXPIRY_DATE ON drugs (EXPIRY_DATE);

-- Trigger for handling expiry date
CREATE OR REPLACE TRIGGER TRG_CHECK_EXPIRY_DATE 
BEFORE INSERT OR UPDATE ON DRUGS
FOR EACH ROW
BEGIN
    IF :NEW.EXPIRY_DATE <= SYSDATE THEN
        RAISE_APPLICATION_ERROR(-20001, 'Expiry date must be in the future.');
    END IF;
END;
/

-- Table: Specializations
CREATE TABLE SPECIALIZATIONS (
    SPECIALIZATION_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    NAME VARCHAR2(100) NOT NULL UNIQUE,
    DESCRIPTION VARCHAR2(255)
);

-- Table: Doctors
CREATE TABLE DOCTORS (
    DOCTOR_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    FIRST_NAME VARCHAR2(50) NOT NULL,
    LAST_NAME VARCHAR2(50) NOT NULL,
    SPECIALIZATION_ID NUMBER NOT NULL, -- Foreign Key
    PHONE_NUMBER VARCHAR2(20),
    EMAIL VARCHAR2(100) UNIQUE,
    LICENSE_NUMBER VARCHAR2(30) NOT NULL UNIQUE
);

-- Table: Patients
CREATE TABLE PATIENTS (
    PATIENT_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    NAME VARCHAR2(100) NOT NULL,
    DOB DATE NOT NULL,
    GENDER CHAR(1) CHECK ( GENDER IN ( 'M', 'F', 'O' ) ),
    CONTACT VARCHAR2(20),
    ADDRESS VARCHAR2(200)
);

-- Table: Prescriptions
CREATE TABLE PRESCRIPTIONS (
    PRESCRIPTION_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    PATIENT_ID NUMBER NOT NULL, -- Foreign Key
    DOCTOR_ID NUMBER NOT NULL, -- Foreign Key
    DRUG_ID NUMBER NOT NULL, -- Foreign Key
    DOSAGE VARCHAR2(50) NOT NULL,
    FREQUENCY VARCHAR2(50) NOT NULL,
    START_DATE DATE NOT NULL,
    END_DATE DATE NOT NULL,
    STATUS VARCHAR2(20) DEFAULT 'Pending' CHECK ( STATUS IN ( 'Pending', 'Dispensed', 'Cancelled' ) ),
    CHECK ( END_DATE >= START_DATE )
);

-- Index on DRUG_ID in PRESCRIPTIONS
CREATE INDEX IDX_PRESCRIPTIONS_DRUG_ID ON PRESCRIPTIONS (DRUG_ID);

-- Table: Pharmacists
CREATE TABLE PHARMACISTS (
    PHARMACIST_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    FIRST_NAME VARCHAR2(50) NOT NULL,
    LAST_NAME VARCHAR2(50) NOT NULL,
    CONTACT VARCHAR2(20),
    EMAIL VARCHAR2(100) UNIQUE,
    HIRE_DATE DATE NOT NULL
);

-- Table: Suppliers
CREATE TABLE SUPPLIERS (
    SUPPLIER_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    NAME VARCHAR2(100) NOT NULL UNIQUE,
    CONTACT VARCHAR2(20),
    EMAIL VARCHAR2(100) UNIQUE,
    LICENSE_NUMBER VARCHAR2(50) NOT NULL UNIQUE
);

-- Table: Drug_Orders (Partitioned by year on ORDER_DATE)
CREATE TABLE DRUG_ORDERS (
    ORDER_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    SUPPLIER_ID NUMBER NOT NULL, -- Foreign Key
    DRUG_ID NUMBER NOT NULL, -- Foreign Key
    ORDER_DATE DATE NOT NULL,
    QUANTITY NUMBER NOT NULL CHECK ( QUANTITY > 0 ),
    DELIVERY_DATE DATE,
    STATUS VARCHAR2(20) DEFAULT 'Pending' CHECK ( STATUS IN ( 'Pending', 'Delivered', 'Cancelled' ) )
)
PARTITION BY RANGE (ORDER_DATE) (
    PARTITION P2023 VALUES LESS THAN (TO_DATE('2024-01-01', 'YYYY-MM-DD')),
    PARTITION P2024 VALUES LESS THAN (TO_DATE('2025-01-01', 'YYYY-MM-DD')),
    PARTITION P2025 VALUES LESS THAN (TO_DATE('2026-01-01', 'YYYY-MM-DD')),
    PARTITION P2026 VALUES LESS THAN (TO_DATE('2027-01-01', 'YYYY-MM-DD')),
    PARTITION P_FUTURE VALUES LESS THAN (MAXVALUE)
);

-- Index on DRUG_ID in DRUG_ORDERS
CREATE INDEX IDX_DRUG_ORDERS_DRUG_ID ON DRUG_ORDERS (DRUG_ID);

-- Table: Dispensation
CREATE TABLE DISPENSATION (
    DISPENSE_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    PRESCRIPTION_ID NUMBER NOT NULL, -- Foreign Key
    DISPENSE_DATE DATE NOT NULL,
    QUANTITY_ISSUED NUMBER NOT NULL CHECK ( QUANTITY_ISSUED > 0 ),
    PHARMACIST_ID NUMBER NOT NULL -- Foreign Key
);

-- Indexes on PRESCRIPTION_ID and DISPENSE_DATE in DISPENSATION
CREATE INDEX IDX_DISPENSATION_PRESCRIPTION_ID ON DISPENSATION (PRESCRIPTION_ID);
CREATE INDEX IDX_DISPENSATION_DISPENSE_DATE ON DISPENSATION (DISPENSE_DATE);

-- Table: Patient_Allergies
CREATE TABLE PATIENT_ALLERGIES (
    ALLERGY_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    PATIENT_ID NUMBER NOT NULL, -- Foreign Key
    DRUG_ID NUMBER NOT NULL, -- Foreign Key
    DESCRIPTION VARCHAR2(255)
);

-- Index on DRUG_ID in PATIENT_ALLERGIES
CREATE INDEX IDX_PATIENT_ALLERGIES_DRUG_ID ON PATIENT_ALLERGIES (DRUG_ID);

-- Table: Drug_Interactions
CREATE TABLE DRUG_INTERACTIONS (
    INTERACTION_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    DRUG_ID1 NUMBER NOT NULL, -- Foreign Key
    DRUG_ID2 NUMBER NOT NULL, -- Foreign Key
    DESCRIPTION VARCHAR2(255),
    CHECK ( DRUG_ID1 != DRUG_ID2 )
);

-- Indexes on DRUG_ID1 and DRUG_ID2 in DRUG_INTERACTIONS
CREATE INDEX IDX_DRUG_INTERACTIONS_DRUG_ID1 ON DRUG_INTERACTIONS (DRUG_ID1);
CREATE INDEX IDX_DRUG_INTERACTIONS_DRUG_ID2 ON DRUG_INTERACTIONS (DRUG_ID2);

-- Table: Log_Table
CREATE TABLE LOG_TABLE (
    LOG_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    DESCRIPTION VARCHAR2(255),
    EVENT_DATE DATE
);

-- Adding Foreign Key Constraints
-- ===============================================

-- Table: DRUGS
ALTER TABLE DRUGS
ADD CONSTRAINT FK_DRUGS_CATEGORY FOREIGN KEY ( CATEGORY_ID )
    REFERENCES DRUG_CATEGORIES ( CATEGORY_ID );

ALTER TABLE DRUGS
ADD CONSTRAINT FK_DRUGS_MANUFACTURER FOREIGN KEY ( MANUFACTURER_ID )
    REFERENCES MANUFACTURERS ( MANUFACTURER_ID );

-- Table: DOCTORS
ALTER TABLE DOCTORS
ADD CONSTRAINT FK_DOCTORS_SPECIALIZATION FOREIGN KEY ( SPECIALIZATION_ID )
    REFERENCES SPECIALIZATIONS ( SPECIALIZATION_ID );

-- Table: PRESCRIPTIONS
ALTER TABLE PRESCRIPTIONS
ADD CONSTRAINT FK_PRESCRIPTIONS_PATIENT FOREIGN KEY ( PATIENT_ID )
    REFERENCES PATIENTS ( PATIENT_ID );

ALTER TABLE PRESCRIPTIONS
ADD CONSTRAINT FK_PRESCRIPTIONS_DOCTOR FOREIGN KEY ( DOCTOR_ID )
    REFERENCES DOCTORS ( DOCTOR_ID );

ALTER TABLE PRESCRIPTIONS
ADD CONSTRAINT FK_PRESCRIPTIONS_DRUG FOREIGN KEY ( DRUG_ID )
    REFERENCES DRUGS ( DRUG_ID );

-- Table: DISPENSATION
ALTER TABLE DISPENSATION
ADD CONSTRAINT FK_DISPENSATION_PRESCRIPTION FOREIGN KEY ( PRESCRIPTION_ID )
    REFERENCES PRESCRIPTIONS ( PRESCRIPTION_ID );

ALTER TABLE DISPENSATION
ADD CONSTRAINT FK_DISPENSATION_PHARMACIST FOREIGN KEY ( PHARMACIST_ID )
    REFERENCES PHARMACISTS ( PHARMACIST_ID );

-- Table: DRUG_ORDERS
ALTER TABLE DRUG_ORDERS
ADD CONSTRAINT FK_DRUG_ORDERS_SUPPLIERS FOREIGN KEY ( SUPPLIER_ID )
    REFERENCES SUPPLIERS ( SUPPLIER_ID );

ALTER TABLE DRUG_ORDERS
ADD CONSTRAINT FK_DRUG_ORDERS_DRUGS FOREIGN KEY ( DRUG_ID )
    REFERENCES DRUGS ( DRUG_ID );

-- Table: PATIENT_ALLERGIES
ALTER TABLE PATIENT_ALLERGIES
ADD CONSTRAINT FK_PATIENT_ALLERGIES_PATIENT FOREIGN KEY ( PATIENT_ID )
    REFERENCES PATIENTS ( PATIENT_ID );

ALTER TABLE PATIENT_ALLERGIES
ADD CONSTRAINT FK_PATIENT_ALLERGIES_DRUG FOREIGN KEY ( DRUG_ID )
    REFERENCES DRUGS ( DRUG_ID );

-- Table: DRUG_INTERACTIONS
ALTER TABLE DRUG_INTERACTIONS
ADD CONSTRAINT FK_DRUG_INTERACTIONS_DRUG1 FOREIGN KEY ( DRUG_ID1 )
    REFERENCES DRUGS ( DRUG_ID );

ALTER TABLE DRUG_INTERACTIONS
ADD CONSTRAINT FK_DRUG_INTERACTIONS_DRUG2 FOREIGN KEY ( DRUG_ID2 )
    REFERENCES DRUGS ( DRUG_ID );


--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------

-- ===============================================
-- Sample Data Insertion for Pharmacy Management System
-- ===============================================

-- Insert into MANUFACTURERS
INSERT INTO MANUFACTURERS (NAME, CONTACT, EMAIL) VALUES ('Prabhu Pharma', '9841001234', 'prabhu@pharma.com');
INSERT INTO MANUFACTURERS (NAME, CONTACT, EMAIL) VALUES ('Sagarmatha Drugs', '9852001234', 'sagarmatha@drugs.com');
INSERT INTO MANUFACTURERS (NAME, CONTACT, EMAIL) VALUES ('Buddha Pharma', '9803001234', 'buddha@pharma.com');
INSERT INTO MANUFACTURERS (NAME, CONTACT, EMAIL) VALUES ('Annapurna Med', '9844001234', 'annapurna@med.com');
INSERT INTO MANUFACTURERS (NAME, CONTACT, EMAIL) VALUES ('Makalu Pharma', '9855001234', 'makalu@pharma.com');
INSERT INTO MANUFACTURERS (NAME, CONTACT, EMAIL) VALUES ('Koshi Drugs', '9806001234', 'koshi@drugs.com');
INSERT INTO MANUFACTURERS (NAME, CONTACT, EMAIL) VALUES ('Gauri Pharma', '9847001234', 'gauri@pharma.com');
INSERT INTO MANUFACTURERS (NAME, CONTACT, EMAIL) VALUES ('Pashupati Med', '9858001234', 'pashupati@med.com');
INSERT INTO MANUFACTURERS (NAME, CONTACT, EMAIL) VALUES ('Dhaulagiri Pharma', '9809001234', 'dhaulagiri@pharma.com');
INSERT INTO MANUFACTURERS (NAME, CONTACT, EMAIL) VALUES ('Kanchanjunga Drugs', '9840001234', 'kanchan@drugs.com');
INSERT INTO MANUFACTURERS (NAME, CONTACT, EMAIL) VALUES ('Lhotse Pharma', '9851112233', 'lhotse@pharma.com');
INSERT INTO MANUFACTURERS (NAME, CONTACT, EMAIL) VALUES ('Manaslu Med', '9802223344', 'manaslu@med.com');
INSERT INTO MANUFACTURERS (NAME, CONTACT, EMAIL) VALUES ('Shanti Pharma', '9843334455', 'shanti@pharma.com');
INSERT INTO MANUFACTURERS (NAME, CONTACT, EMAIL) VALUES ('Peace Drugs', '9854445566', 'peace@drugs.com');
INSERT INTO MANUFACTURERS (NAME, CONTACT, EMAIL) VALUES ('Harmony Pharma', '9805556677', 'harmony@pharma.com');

-- Insert into DRUG_CATEGORIES
INSERT INTO DRUG_CATEGORIES (NAME, STORAGE_REQUIREMENT) VALUES ('Antiemetics', 'Store below 25°C');
INSERT INTO DRUG_CATEGORIES (NAME, STORAGE_REQUIREMENT) VALUES ('Anticonvulsants', 'Store in dry place');
INSERT INTO DRUG_CATEGORIES (NAME, STORAGE_REQUIREMENT) VALUES ('Controlled Substances', 'Store below 30°C');
INSERT INTO DRUG_CATEGORIES (NAME, STORAGE_REQUIREMENT) VALUES ('Antianxiety', 'Store in cool place');
INSERT INTO DRUG_CATEGORIES (NAME, STORAGE_REQUIREMENT) VALUES ('Antimigraine', 'Store below 25°C');
INSERT INTO DRUG_CATEGORIES (NAME, STORAGE_REQUIREMENT) VALUES ('Antiparkinson', 'Refrigerate at 2-8°C');
INSERT INTO DRUG_CATEGORIES (NAME, STORAGE_REQUIREMENT) VALUES ('Antipsychotics', 'Store in secure vault');
INSERT INTO DRUG_CATEGORIES (NAME, STORAGE_REQUIREMENT) VALUES ('Hypnotics', 'Store below 30°C');
INSERT INTO DRUG_CATEGORIES (NAME, STORAGE_REQUIREMENT) VALUES ('Antispasmodics', 'Store in dry place');
INSERT INTO DRUG_CATEGORIES (NAME, STORAGE_REQUIREMENT) VALUES ('Antithyroid', 'Store below 25°C');
INSERT INTO DRUG_CATEGORIES (NAME, STORAGE_REQUIREMENT) VALUES ('Immunosuppressants', 'Refrigerate at 2-8°C');
INSERT INTO DRUG_CATEGORIES (NAME, STORAGE_REQUIREMENT) VALUES ('Antimalarials', 'Store below 25°C');
INSERT INTO DRUG_CATEGORIES (NAME, STORAGE_REQUIREMENT) VALUES ('Antitussives', 'Store in dry place');
INSERT INTO DRUG_CATEGORIES (NAME, STORAGE_REQUIREMENT) VALUES ('Expectorants', 'Store below 30°C');
INSERT INTO DRUG_CATEGORIES (NAME, STORAGE_REQUIREMENT) VALUES ('Antileptics', 'Store in cool place');

-- Insert into DRUGS
INSERT INTO DRUGS (NAME, CATEGORY_ID, MANUFACTURER_ID, EXPIRY_DATE, UNIT_PRICE, STOCK_QUANTITY) VALUES ('Ondansetron', 1, 1, TO_DATE('2025-08-15', 'YYYY-MM-DD'), 30.00, 300);
INSERT INTO DRUGS (NAME, CATEGORY_ID, MANUFACTURER_ID, EXPIRY_DATE, UNIT_PRICE, STOCK_QUANTITY) VALUES ('Levetiracetam', 2, 2, TO_DATE('2025-07-30', 'YYYY-MM-DD'), 45.00, 200);
INSERT INTO DRUGS (NAME, CATEGORY_ID, MANUFACTURER_ID, EXPIRY_DATE, UNIT_PRICE, STOCK_QUANTITY) VALUES ('Cyclobenzaprine', 3, 3, TO_DATE('2026-09-10', 'YYYY-MM-DD'), 25.50, 250);
INSERT INTO DRUGS (NAME, CATEGORY_ID, MANUFACTURER_ID, EXPIRY_DATE, UNIT_PRICE, STOCK_QUANTITY) VALUES ('Lorazepam', 4, 4, TO_DATE('2026-06-30', 'YYYY-MM-DD'), 35.00, 150);
INSERT INTO DRUGS (NAME, CATEGORY_ID, MANUFACTURER_ID, EXPIRY_DATE, UNIT_PRICE, STOCK_QUANTITY) VALUES ('Sumatriptan', 5, 5, TO_DATE('2026-08-05', 'YYYY-MM-DD'), 50.00, 100);
INSERT INTO DRUGS (NAME, CATEGORY_ID, MANUFACTURER_ID, EXPIRY_DATE, UNIT_PRICE, STOCK_QUANTITY) VALUES ('Levodopa', 6, 6, TO_DATE('2026-07-15', 'YYYY-MM-DD'), 60.00, 120);
INSERT INTO DRUGS (NAME, CATEGORY_ID, MANUFACTURER_ID, EXPIRY_DATE, UNIT_PRICE, STOCK_QUANTITY) VALUES ('Olanzapine', 7, 7, TO_DATE('2026-09-01', 'YYYY-MM-DD'), 55.00, 80);
INSERT INTO DRUGS (NAME, CATEGORY_ID, MANUFACTURER_ID, EXPIRY_DATE, UNIT_PRICE, STOCK_QUANTITY) VALUES ('Zolpidem', 8, 8, TO_DATE('2026-08-20', 'YYYY-MM-DD'), 40.00, 200);
INSERT INTO DRUGS (NAME, CATEGORY_ID, MANUFACTURER_ID, EXPIRY_DATE, UNIT_PRICE, STOCK_QUANTITY) VALUES ('Hyoscine', 9, 9, TO_DATE('2026-07-25', 'YYYY-MM-DD'), 20.00, 300);
INSERT INTO DRUGS (NAME, CATEGORY_ID, MANUFACTURER_ID, EXPIRY_DATE, UNIT_PRICE, STOCK_QUANTITY) VALUES ('Methimazole', 10, 10, TO_DATE('2026-06-15', 'YYYY-MM-DD'), 30.00, 250);
INSERT INTO DRUGS (NAME, CATEGORY_ID, MANUFACTURER_ID, EXPIRY_DATE, UNIT_PRICE, STOCK_QUANTITY) VALUES ('Azathioprine', 11, 11, TO_DATE('2026-08-10', 'YYYY-MM-DD'), 65.00, 100);
INSERT INTO DRUGS (NAME, CATEGORY_ID, MANUFACTURER_ID, EXPIRY_DATE, UNIT_PRICE, STOCK_QUANTITY) VALUES ('Chloroquine', 12, 12, TO_DATE('2026-07-30', 'YYYY-MM-DD'), 25.00, 400);
INSERT INTO DRUGS (NAME, CATEGORY_ID, MANUFACTURER_ID, EXPIRY_DATE, UNIT_PRICE, STOCK_QUANTITY) VALUES ('Codeine', 13, 13, TO_DATE('2026-09-05', 'YYYY-MM-DD'), 45.00, 150);
INSERT INTO DRUGS (NAME, CATEGORY_ID, MANUFACTURER_ID, EXPIRY_DATE, UNIT_PRICE, STOCK_QUANTITY) VALUES ('Guaifenesin', 14, 14, TO_DATE('2026-08-25', 'YYYY-MM-DD'), 15.00, 500);
INSERT INTO DRUGS (NAME, CATEGORY_ID, MANUFACTURER_ID, EXPIRY_DATE, UNIT_PRICE, STOCK_QUANTITY) VALUES ('Phenytoin', 15, 15, TO_DATE('2026-07-10', 'YYYY-MM-DD'), 35.00, 200);

-- Insert into SPECIALIZATIONS
INSERT INTO SPECIALIZATIONS (NAME, DESCRIPTION) VALUES ('Endocrinology', 'Thyroid disorders');
INSERT INTO SPECIALIZATIONS (NAME, DESCRIPTION) VALUES ('Pain Management', 'Chronic pain treatment');
INSERT INTO SPECIALIZATIONS (NAME, DESCRIPTION) VALUES ('Infectious Diseases', 'Viral infections');
INSERT INTO SPECIALIZATIONS (NAME, DESCRIPTION) VALUES ('Rheumatology', 'Joint disorders');
INSERT INTO SPECIALIZATIONS (NAME, DESCRIPTION) VALUES ('Cardiothoracic Surgery', 'Heart and lung surgery');
INSERT INTO SPECIALIZATIONS (NAME, DESCRIPTION) VALUES ('Neurosurgery', 'Brain and spine surgery');
INSERT INTO SPECIALIZATIONS (NAME, DESCRIPTION) VALUES ('Pediatric Surgery', 'Child surgery');
INSERT INTO SPECIALIZATIONS (NAME, DESCRIPTION) VALUES ('Oncology', 'Tumor treatment');
INSERT INTO SPECIALIZATIONS (NAME, DESCRIPTION) VALUES ('Gastroenterology', 'Stomach disorders');
INSERT INTO SPECIALIZATIONS (NAME, DESCRIPTION) VALUES ('Nephrology', 'Kidney disorders');
INSERT INTO SPECIALIZATIONS (NAME, DESCRIPTION) VALUES ('Pulmonology', 'Respiratory diseases');
INSERT INTO SPECIALIZATIONS (NAME, DESCRIPTION) VALUES ('Dermatology', 'Skin infections');
INSERT INTO SPECIALIZATIONS (NAME, DESCRIPTION) VALUES ('Psychiatry', 'Mood disorders');
INSERT INTO SPECIALIZATIONS (NAME, DESCRIPTION) VALUES ('Orthopedic Surgery', 'Bone surgery');
INSERT INTO SPECIALIZATIONS (NAME, DESCRIPTION) VALUES ('Urology', 'Bladder disorders');

-- Insert into DOCTORS
INSERT INTO DOCTORS (FIRST_NAME, LAST_NAME, SPECIALIZATION_ID, PHONE_NUMBER, EMAIL, LICENSE_NUMBER) VALUES ('Amar', 'Nepal', 1, '9841002233', 'amar.nepal@hospital.com', 'NMC22345');
INSERT INTO DOCTORS (FIRST_NAME, LAST_NAME, SPECIALIZATION_ID, PHONE_NUMBER, EMAIL, LICENSE_NUMBER) VALUES ('Bina', 'Pokharel', 2, '9852002233', 'bina.pokharel@hospital.com', 'NMC22346');
INSERT INTO DOCTORS (FIRST_NAME, LAST_NAME, SPECIALIZATION_ID, PHONE_NUMBER, EMAIL, LICENSE_NUMBER) VALUES ('Chandra', 'Bista', 3, '9803002233', 'chandra.bista@hospital.com', 'NMC22347');
INSERT INTO DOCTORS (FIRST_NAME, LAST_NAME, SPECIALIZATION_ID, PHONE_NUMBER, EMAIL, LICENSE_NUMBER) VALUES ('Dina', 'Rimal', 4, '9844002233', 'dina.rimal@hospital.com', 'NMC22348');
INSERT INTO DOCTORS (FIRST_NAME, LAST_NAME, SPECIALIZATION_ID, PHONE_NUMBER, EMAIL, LICENSE_NUMBER) VALUES ('Eknath', 'Koirala', 5, '9855002233', 'eknath.koirala@hospital.com', 'NMC22349');
INSERT INTO DOCTORS (FIRST_NAME, LAST_NAME, SPECIALIZATION_ID, PHONE_NUMBER, EMAIL, LICENSE_NUMBER) VALUES ('Fulmaya', 'Sherpa', 6, '9806002233', 'fulmaya.sherpa@hospital.com', 'NMC22350');
INSERT INTO DOCTORS (FIRST_NAME, LAST_NAME, SPECIALIZATION_ID, PHONE_NUMBER, EMAIL, LICENSE_NUMBER) VALUES ('Gopal', 'Dangol', 7, '9847002233', 'gopal.dangol@hospital.com', 'NMC22351');
INSERT INTO DOCTORS (FIRST_NAME, LAST_NAME, SPECIALIZATION_ID, PHONE_NUMBER, EMAIL, LICENSE_NUMBER) VALUES ('Hema', 'Baral', 8, '9858002233', 'hema.baral@hospital.com', 'NMC22352');
INSERT INTO DOCTORS (FIRST_NAME, LAST_NAME, SPECIALIZATION_ID, PHONE_NUMBER, EMAIL, LICENSE_NUMBER) VALUES ('Indra', 'Panta', 9, '9809002233', 'indra.panta@hospital.com', 'NMC22353');
INSERT INTO DOCTORS (FIRST_NAME, LAST_NAME, SPECIALIZATION_ID, PHONE_NUMBER, EMAIL, LICENSE_NUMBER) VALUES ('Juna', 'Thakuri', 10, '9840002233', 'juna.thakuri@hospital.com', 'NMC22354');
INSERT INTO DOCTORS (FIRST_NAME, LAST_NAME, SPECIALIZATION_ID, PHONE_NUMBER, EMAIL, LICENSE_NUMBER) VALUES ('Kiran', 'Malla', 11, '9851113344', 'kiran.malla@hospital.com', 'NMC22355');
INSERT INTO DOCTORS (FIRST_NAME, LAST_NAME, SPECIALIZATION_ID, PHONE_NUMBER, EMAIL, LICENSE_NUMBER) VALUES ('Lila', 'Budhathoki', 12, '9802223344', 'lila.budhathoki@hospital.com', 'NMC22356');
INSERT INTO DOCTORS (FIRST_NAME, LAST_NAME, SPECIALIZATION_ID, PHONE_NUMBER, EMAIL, LICENSE_NUMBER) VALUES ('Mohan', 'Paudel', 13, '9843334455', 'mohan.paudel@hospital.com', 'NMC22357');
INSERT INTO DOCTORS (FIRST_NAME, LAST_NAME, SPECIALIZATION_ID, PHONE_NUMBER, EMAIL, LICENSE_NUMBER) VALUES ('Nima', 'Limbu', 14, '9854445566', 'nima.limbu@hospital.com', 'NMC22358');
INSERT INTO DOCTORS (FIRST_NAME, LAST_NAME, SPECIALIZATION_ID, PHONE_NUMBER, EMAIL, LICENSE_NUMBER) VALUES ('Om', 'Bajracharya', 15, '9805556677', 'om.bajracharya@hospital.com', 'NMC22359');

-- Insert into PATIENTS
INSERT INTO PATIENTS (NAME, DOB, GENDER, CONTACT, ADDRESS) VALUES ('Nabin Karki', TO_DATE('1990-01-12', 'YYYY-MM-DD'), 'M', '9841002233', 'Kathmandu, Baneshwor');
INSERT INTO PATIENTS (NAME, DOB, GENDER, CONTACT, ADDRESS) VALUES ('Sima Thapa', TO_DATE('1987-04-18', 'YYYY-MM-DD'), 'F', '9852002233', 'Pokhara, Prithvi Chowk');
INSERT INTO PATIENTS (NAME, DOB, GENDER, CONTACT, ADDRESS) VALUES ('Tara Gurung', TO_DATE('1993-08-25', 'YYYY-MM-DD'), 'M', '9803002233', 'Lalitpur, Satdobato');
INSERT INTO PATIENTS (NAME, DOB, GENDER, CONTACT, ADDRESS) VALUES ('Uma Poudel', TO_DATE('1989-11-30', 'YYYY-MM-DD'), 'F', '9844002233', 'Bhaktapur, Kamalbinayak');
INSERT INTO PATIENTS (NAME, DOB, GENDER, CONTACT, ADDRESS) VALUES ('Vikram Adhikari', TO_DATE('1992-03-15', 'YYYY-MM-DD'), 'M', '9855002233', 'Chitwan, Sauraha');
INSERT INTO PATIENTS (NAME, DOB, GENDER, CONTACT, ADDRESS) VALUES ('Yamuna Rai', TO_DATE('1988-07-22', 'YYYY-MM-DD'), 'F', '9806002233', 'Dharan, Chatara');
INSERT INTO PATIENTS (NAME, DOB, GENDER, CONTACT, ADDRESS) VALUES ('Zahir Dahal', TO_DATE('1991-05-10', 'YYYY-MM-DD'), 'M', '9847002233', 'Kathmandu, Kalimati');
INSERT INTO PATIENTS (NAME, DOB, GENDER, CONTACT, ADDRESS) VALUES ('Alina Karki', TO_DATE('1994-09-05', 'YYYY-MM-DD'), 'F', '9858002233', 'Pokhara, Bagar');
INSERT INTO PATIENTS (NAME, DOB, GENDER, CONTACT, ADDRESS) VALUES ('Bimal Tamang', TO_DATE('1986-12-20', 'YYYY-MM-DD'), 'M', '9809002233', 'Lalitpur, Ekantakuna');
INSERT INTO PATIENTS (NAME, DOB, GENDER, CONTACT, ADDRESS) VALUES ('Chitra Magar', TO_DATE('1990-02-28', 'YYYY-MM-DD'), 'F', '9840002233', 'Kathmandu, Dillibazar');
INSERT INTO PATIENTS (NAME, DOB, GENDER, CONTACT, ADDRESS) VALUES ('Dipak Bhattarai', TO_DATE('1987-06-15', 'YYYY-MM-DD'), 'M', '9851113344', 'Bhaktapur, Thimi');
INSERT INTO PATIENTS (NAME, DOB, GENDER, CONTACT, ADDRESS) VALUES ('Esha Subedi', TO_DATE('1993-10-10', 'YYYY-MM-DD'), 'F', '9802223344', 'Chitwan, Ratnanagar');
INSERT INTO PATIENTS (NAME, DOB, GENDER, CONTACT, ADDRESS) VALUES ('Firoj Bhandari', TO_DATE('1989-01-25', 'YYYY-MM-DD'), 'M', '9843334455', 'Dharan, Tarahara');
INSERT INTO PATIENTS (NAME, DOB, GENDER, CONTACT, ADDRESS) VALUES ('Ganga Lama', TO_DATE('1992-04-30', 'YYYY-MM-DD'), 'F', '9854445566', 'Kathmandu, Jorpati');
INSERT INTO PATIENTS (NAME, DOB, GENDER, CONTACT, ADDRESS) VALUES ('Hari Chhetri', TO_DATE('1988-08-12', 'YYYY-MM-DD'), 'M', '9805556677', 'Pokhara, Gairapatan');

-- Insert into PHARMACISTS
INSERT INTO PHARMACISTS (FIRST_NAME, LAST_NAME, CONTACT, EMAIL, HIRE_DATE) VALUES ('Nirmal', 'Shrestha', '9841002233', 'nirmal.shrestha@pharmacy.com', TO_DATE('2020-02-10', 'YYYY-MM-DD'));
INSERT INTO PHARMACISTS (FIRST_NAME, LAST_NAME, CONTACT, EMAIL, HIRE_DATE) VALUES ('Sita', 'Thapa', '9852002233', 'sita.thapa2@pharmacy.com', TO_DATE('2019-05-15', 'YYYY-MM-DD'));
INSERT INTO PHARMACISTS (FIRST_NAME, LAST_NAME, CONTACT, EMAIL, HIRE_DATE) VALUES ('Tulsi', 'Gurung', '9803002233', 'tulsi.gurung@pharmacy.com', TO_DATE('2021-08-20', 'YYYY-MM-DD'));
INSERT INTO PHARMACISTS (FIRST_NAME, LAST_NAME, CONTACT, EMAIL, HIRE_DATE) VALUES ('Uma', 'Poudel', '9844002233', 'uma.poudel@pharmacy.com', TO_DATE('2018-12-25', 'YYYY-MM-DD'));
INSERT INTO PHARMACISTS (FIRST_NAME, LAST_NAME, CONTACT, EMAIL, HIRE_DATE) VALUES ('Vikash', 'Adhikari', '9855002233', 'vikash.adhikari@pharmacy.com', TO_DATE('2022-03-10', 'YYYY-MM-DD'));
INSERT INTO PHARMACISTS (FIRST_NAME, LAST_NAME, CONTACT, EMAIL, HIRE_DATE) VALUES ('Yamini', 'Rai', '9806002233', 'yamini.rai@pharmacy.com', TO_DATE('2020-10-15', 'YYYY-MM-DD'));
INSERT INTO PHARMACISTS (FIRST_NAME, LAST_NAME, CONTACT, EMAIL, HIRE_DATE) VALUES ('Zubin', 'Dahal', '9847002233', 'zubin.dahal@pharmacy.com', TO_DATE('2019-06-20', 'YYYY-MM-DD'));
INSERT INTO PHARMACISTS (FIRST_NAME, LAST_NAME, CONTACT, EMAIL, HIRE_DATE) VALUES ('Alisha', 'Karki', '9858002233', 'alisha.karki@pharmacy.com', TO_DATE('2021-01-30', 'YYYY-MM-DD'));
INSERT INTO PHARMACISTS (FIRST_NAME, LAST_NAME, CONTACT, EMAIL, HIRE_DATE) VALUES ('Bimala', 'Tamang', '9809002233', 'bimala.tamang@pharmacy.com', TO_DATE('2020-07-25', 'YYYY-MM-DD'));
INSERT INTO PHARMACISTS (FIRST_NAME, LAST_NAME, CONTACT, EMAIL, HIRE_DATE) VALUES ('Chirag', 'Magar', '9840002233', 'chirag.magar@pharmacy.com', TO_DATE('2018-09-15', 'YYYY-MM-DD'));
INSERT INTO PHARMACISTS (FIRST_NAME, LAST_NAME, CONTACT, EMAIL, HIRE_DATE) VALUES ('Deepa', 'Bhattarai', '9851113344', 'deepa.bhattarai@pharmacy.com', TO_DATE('2022-02-20', 'YYYY-MM-DD'));
INSERT INTO PHARMACISTS (FIRST_NAME, LAST_NAME, CONTACT, EMAIL, HIRE_DATE) VALUES ('Eshita', 'Subedi', '9802223344', 'eshita.subedi@pharmacy.com', TO_DATE('2019-11-10', 'YYYY-MM-DD'));
INSERT INTO PHARMACISTS (FIRST_NAME, LAST_NAME, CONTACT, EMAIL, HIRE_DATE) VALUES ('Farid', 'Bhandari', '9843334455', 'farid.bhandari@pharmacy.com', TO_DATE('2021-06-15', 'YYYY-MM-DD'));
INSERT INTO PHARMACISTS (FIRST_NAME, LAST_NAME, CONTACT, EMAIL, HIRE_DATE) VALUES ('Gita', 'Lama', '9854445566', 'gita.lama@pharmacy.com', TO_DATE('2020-04-20', 'YYYY-MM-DD'));
INSERT INTO PHARMACISTS (FIRST_NAME, LAST_NAME, CONTACT, EMAIL, HIRE_DATE) VALUES ('Hari', 'Chhetri', '9805556677', 'hari.chhetri@pharmacy.com', TO_DATE('2018-08-25', 'YYYY-MM-DD'));



-- SUPPLIERS
INSERT INTO SUPPLIERS (NAME, CONTACT, EMAIL, LICENSE_NUMBER) VALUES ('Sagarmatha Med Supply', '9841002233', 'sagarmatha@medsupply.com', 'SUP22345');
INSERT INTO SUPPLIERS (NAME, CONTACT, EMAIL, LICENSE_NUMBER) VALUES ('Buddha Drug Co', '9852002233', 'buddha@drugco.com', 'SUP22346');
INSERT INTO SUPPLIERS (NAME, CONTACT, EMAIL, LICENSE_NUMBER) VALUES ('Annapurna Distributors', '9803002233', 'annapurna@distributors.com', 'SUP22347');
INSERT INTO SUPPLIERS (NAME, CONTACT, EMAIL, LICENSE_NUMBER) VALUES ('Makalu Med Supply', '9844002233', 'makalu@medsupply.com', 'SUP22348');
INSERT INTO SUPPLIERS (NAME, CONTACT, EMAIL, LICENSE_NUMBER) VALUES ('Koshi Pharma', '9855002233', 'koshi@pharma.com', 'SUP22349');
INSERT INTO SUPPLIERS (NAME, CONTACT, EMAIL, LICENSE_NUMBER) VALUES ('Gauri Drug House', '9806002233', 'gauri@drug.com', 'SUP22350');
INSERT INTO SUPPLIERS (NAME, CONTACT, EMAIL, LICENSE_NUMBER) VALUES ('Pashupati Suppliers', '9847002233', 'pashupati@suppliers.com', 'SUP22351');
INSERT INTO SUPPLIERS (NAME, CONTACT, EMAIL, LICENSE_NUMBER) VALUES ('Dhaulagiri Med Dist', '9858002233', 'dhaulagiri@meddist.com', 'SUP22352');
INSERT INTO SUPPLIERS (NAME, CONTACT, EMAIL, LICENSE_NUMBER) VALUES ('Kanchanjunga Pharma', '9809002233', 'kanchan@pharma.com', 'SUP22353');
INSERT INTO SUPPLIERS (NAME, CONTACT, EMAIL, LICENSE_NUMBER) VALUES ('Lhotse Drug Co', '9840002233', 'lhotse@drugco.com', 'SUP22354');
INSERT INTO SUPPLIERS (NAME, CONTACT, EMAIL, LICENSE_NUMBER) VALUES ('Manaslu Med Supply', '9851113344', 'manaslu@medsupply.com', 'SUP22355');
INSERT INTO SUPPLIERS (NAME, CONTACT, EMAIL, LICENSE_NUMBER) VALUES ('Shanti Distributors', '9802223344', 'shanti@distributors.com', 'SUP22356');
INSERT INTO SUPPLIERS (NAME, CONTACT, EMAIL, LICENSE_NUMBER) VALUES ('Peace Pharma', '9843334455', 'peace@pharma.com', 'SUP22357');
INSERT INTO SUPPLIERS (NAME, CONTACT, EMAIL, LICENSE_NUMBER) VALUES ('Harmony Med Supply', '9854445566', 'harmony@medsupply.com', 'SUP22358');
INSERT INTO SUPPLIERS (NAME, CONTACT, EMAIL, LICENSE_NUMBER) VALUES ('Narayani Drug House', '9805556677', 'narayani@drug.com', 'SUP22359');

-- PRESCRIPTIONS
INSERT INTO PRESCRIPTIONS (PATIENT_ID, DOCTOR_ID, DRUG_ID, DOSAGE, FREQUENCY, START_DATE, END_DATE, STATUS) VALUES (1, 1, 1, '8mg', 'Once daily', TO_DATE('2025-09-01', 'YYYY-MM-DD'), TO_DATE('2025-09-08', 'YYYY-MM-DD'), 'Dispensed');
INSERT INTO PRESCRIPTIONS (PATIENT_ID, DOCTOR_ID, DRUG_ID, DOSAGE, FREQUENCY, START_DATE, END_DATE, STATUS) VALUES (1, 1, 1, '8mg', 'Once daily', TO_DATE('2025-09-02', 'YYYY-MM-DD'), TO_DATE('2025-09-08', 'YYYY-MM-DD'), 'Dispensed');
INSERT INTO PRESCRIPTIONS (PATIENT_ID, DOCTOR_ID, DRUG_ID, DOSAGE, FREQUENCY, START_DATE, END_DATE, STATUS) VALUES (2, 2, 2, '500mg', 'Twice daily', TO_DATE('2025-09-02', 'YYYY-MM-DD'), TO_DATE('2025-09-16', 'YYYY-MM-DD'), 'Pending');
INSERT INTO PRESCRIPTIONS (PATIENT_ID, DOCTOR_ID, DRUG_ID, DOSAGE, FREQUENCY, START_DATE, END_DATE, STATUS) VALUES (3, 3, 3, '10mg', 'Once daily', TO_DATE('2025-09-03', 'YYYY-MM-DD'), TO_DATE('2025-09-10', 'YYYY-MM-DD'), 'Dispensed');
INSERT INTO PRESCRIPTIONS (PATIENT_ID, DOCTOR_ID, DRUG_ID, DOSAGE, FREQUENCY, START_DATE, END_DATE, STATUS) VALUES (4, 4, 4, '1mg', 'As needed', TO_DATE('2025-09-04', 'YYYY-MM-DD'), TO_DATE('2025-09-11', 'YYYY-MM-DD'), 'Pending');
INSERT INTO PRESCRIPTIONS (PATIENT_ID, DOCTOR_ID, DRUG_ID, DOSAGE, FREQUENCY, START_DATE, END_DATE, STATUS) VALUES (5, 5, 5, '50mg', 'As needed', TO_DATE('2025-09-05', 'YYYY-MM-DD'), TO_DATE('2025-09-12', 'YYYY-MM-DD'), 'Dispensed');
INSERT INTO PRESCRIPTIONS (PATIENT_ID, DOCTOR_ID, DRUG_ID, DOSAGE, FREQUENCY, START_DATE, END_DATE, STATUS) VALUES (6, 6, 6, '100mg', 'Thrice daily', TO_DATE('2025-09-06', 'YYYY-MM-DD'), TO_DATE('2025-09-20', 'YYYY-MM-DD'), 'Pending');
INSERT INTO PRESCRIPTIONS (PATIENT_ID, DOCTOR_ID, DRUG_ID, DOSAGE, FREQUENCY, START_DATE, END_DATE, STATUS) VALUES (7, 7, 7, '5mg', 'Once daily', TO_DATE('2025-09-07', 'YYYY-MM-DD'), TO_DATE('2025-09-14', 'YYYY-MM-DD'), 'Dispensed');
INSERT INTO PRESCRIPTIONS (PATIENT_ID, DOCTOR_ID, DRUG_ID, DOSAGE, FREQUENCY, START_DATE, END_DATE, STATUS) VALUES (8, 8, 8, '10mg', 'At bedtime', TO_DATE('2025-09-08', 'YYYY-MM-DD'), TO_DATE('2025-09-15', 'YYYY-MM-DD'), 'Pending');
INSERT INTO PRESCRIPTIONS (PATIENT_ID, DOCTOR_ID, DRUG_ID, DOSAGE, FREQUENCY, START_DATE, END_DATE, STATUS) VALUES (9, 9, 9, '20mg', 'Thrice daily', TO_DATE('2025-09-09', 'YYYY-MM-DD'), TO_DATE('2025-09-16', 'YYYY-MM-DD'), 'Dispensed');
INSERT INTO PRESCRIPTIONS (PATIENT_ID, DOCTOR_ID, DRUG_ID, DOSAGE, FREQUENCY, START_DATE, END_DATE, STATUS) VALUES (10, 10, 10, '10mg', 'Once daily', TO_DATE('2025-09-10', 'YYYY-MM-DD'), TO_DATE('2025-09-24', 'YYYY-MM-DD'), 'Pending');
INSERT INTO PRESCRIPTIONS (PATIENT_ID, DOCTOR_ID, DRUG_ID, DOSAGE, FREQUENCY, START_DATE, END_DATE, STATUS) VALUES (11, 11, 11, '50mg', 'Twice daily', TO_DATE('2025-09-11', 'YYYY-MM-DD'), TO_DATE('2025-09-18', 'YYYY-MM-DD'), 'Dispensed');
INSERT INTO PRESCRIPTIONS (PATIENT_ID, DOCTOR_ID, DRUG_ID, DOSAGE, FREQUENCY, START_DATE, END_DATE, STATUS) VALUES (12, 12, 12, '250mg', 'Once daily', TO_DATE('2025-09-12', 'YYYY-MM-DD'), TO_DATE('2025-09-19', 'YYYY-MM-DD'), 'Pending');
INSERT INTO PRESCRIPTIONS (PATIENT_ID, DOCTOR_ID, DRUG_ID, DOSAGE, FREQUENCY, START_DATE, END_DATE, STATUS) VALUES (13, 13, 13, '30mg', 'As needed', TO_DATE('2025-09-13', 'YYYY-MM-DD'), TO_DATE('2025-09-20', 'YYYY-MM-DD'), 'Dispensed');
INSERT INTO PRESCRIPTIONS (PATIENT_ID, DOCTOR_ID, DRUG_ID, DOSAGE, FREQUENCY, START_DATE, END_DATE, STATUS) VALUES (14, 14, 14, '200mg', 'Twice daily', TO_DATE('2025-09-14', 'YYYY-MM-DD'), TO_DATE('2025-09-21', 'YYYY-MM-DD'), 'Pending');
INSERT INTO PRESCRIPTIONS (PATIENT_ID, DOCTOR_ID, DRUG_ID, DOSAGE, FREQUENCY, START_DATE, END_DATE, STATUS) VALUES (15, 15, 15, '100mg', 'Twice daily', TO_DATE('2025-09-15', 'YYYY-MM-DD'), TO_DATE('2025-09-29', 'YYYY-MM-DD'), 'Dispensed');

-- DISPENSATION
INSERT INTO DISPENSATION (PRESCRIPTION_ID, DISPENSE_DATE, QUANTITY_ISSUED, PHARMACIST_ID) VALUES (1, TO_DATE('2025-09-02', 'YYYY-MM-DD'), 7, 1);
INSERT INTO DISPENSATION (PRESCRIPTION_ID, DISPENSE_DATE, QUANTITY_ISSUED, PHARMACIST_ID) VALUES (3, TO_DATE('2025-09-04', 'YYYY-MM-DD'), 7, 2);
INSERT INTO DISPENSATION (PRESCRIPTION_ID, DISPENSE_DATE, QUANTITY_ISSUED, PHARMACIST_ID) VALUES (5, TO_DATE('2025-09-06', 'YYYY-MM-DD'), 5, 3);
INSERT INTO DISPENSATION (PRESCRIPTION_ID, DISPENSE_DATE, QUANTITY_ISSUED, PHARMACIST_ID) VALUES (7, TO_DATE('2025-09-08', 'YYYY-MM-DD'), 7, 4);
INSERT INTO DISPENSATION (PRESCRIPTION_ID, DISPENSE_DATE, QUANTITY_ISSUED, PHARMACIST_ID) VALUES (9, TO_DATE('2025-09-10', 'YYYY-MM-DD'), 21, 5);
INSERT INTO DISPENSATION (PRESCRIPTION_ID, DISPENSE_DATE, QUANTITY_ISSUED, PHARMACIST_ID) VALUES (11, TO_DATE('2025-09-12', 'YYYY-MM-DD'), 14, 6);
INSERT INTO DISPENSATION (PRESCRIPTION_ID, DISPENSE_DATE, QUANTITY_ISSUED, PHARMACIST_ID) VALUES (13, TO_DATE('2025-09-14', 'YYYY-MM-DD'), 5, 7);
INSERT INTO DISPENSATION (PRESCRIPTION_ID, DISPENSE_DATE, QUANTITY_ISSUED, PHARMACIST_ID) VALUES (15, TO_DATE('2025-09-16', 'YYYY-MM-DD'), 14, 8);
INSERT INTO DISPENSATION (PRESCRIPTION_ID, DISPENSE_DATE, QUANTITY_ISSUED, PHARMACIST_ID) VALUES (1, TO_DATE('2025-09-03', 'YYYY-MM-DD'), 7, 9);
INSERT INTO DISPENSATION (PRESCRIPTION_ID, DISPENSE_DATE, QUANTITY_ISSUED, PHARMACIST_ID) VALUES (3, TO_DATE('2025-09-05', 'YYYY-MM-DD'), 7, 10);
INSERT INTO DISPENSATION (PRESCRIPTION_ID, DISPENSE_DATE, QUANTITY_ISSUED, PHARMACIST_ID) VALUES (5, TO_DATE('2025-09-07', 'YYYY-MM-DD'), 5, 11);
INSERT INTO DISPENSATION (PRESCRIPTION_ID, DISPENSE_DATE, QUANTITY_ISSUED, PHARMACIST_ID) VALUES (7, TO_DATE('2025-09-09', 'YYYY-MM-DD'), 7, 12);
INSERT INTO DISPENSATION (PRESCRIPTION_ID, DISPENSE_DATE, QUANTITY_ISSUED, PHARMACIST_ID) VALUES (9, TO_DATE('2025-09-11', 'YYYY-MM-DD'), 14, 13);
INSERT INTO DISPENSATION (PRESCRIPTION_ID, DISPENSE_DATE, QUANTITY_ISSUED, PHARMACIST_ID) VALUES (11, TO_DATE('2025-09-13', 'YYYY-MM-DD'), 7, 14);
INSERT INTO DISPENSATION (PRESCRIPTION_ID, DISPENSE_DATE, QUANTITY_ISSUED, PHARMACIST_ID) VALUES (15, TO_DATE('2025-09-17', 'YYYY-MM-DD'), 14, 15);

-- DRUG_ORDERS
INSERT INTO DRUG_ORDERS (SUPPLIER_ID, DRUG_ID, ORDER_DATE, QUANTITY, DELIVERY_DATE, STATUS) VALUES (1, 1, TO_DATE('2025-08-01', 'YYYY-MM-DD'), 300, TO_DATE('2025-08-20', 'YYYY-MM-DD'), 'Delivered');
INSERT INTO DRUG_ORDERS (SUPPLIER_ID, DRUG_ID, ORDER_DATE, QUANTITY, DELIVERY_DATE, STATUS) VALUES (2, 2, TO_DATE('2025-08-02', 'YYYY-MM-DD'), 200, TO_DATE('2025-08-06', 'YYYY-MM-DD'), 'Delivered');
INSERT INTO DRUG_ORDERS (SUPPLIER_ID, DRUG_ID, ORDER_DATE, QUANTITY, DELIVERY_DATE, STATUS) VALUES (3, 3, TO_DATE('2025-08-03', 'YYYY-MM-DD'), 250, TO_DATE('2025-08-15', 'YYYY-MM-DD'), 'Delivered');
INSERT INTO DRUG_ORDERS (SUPPLIER_ID, DRUG_ID, ORDER_DATE, QUANTITY, DELIVERY_DATE, STATUS) VALUES (4, 4, TO_DATE('2025-08-04', 'YYYY-MM-DD'), 150, TO_DATE('2025-08-08', 'YYYY-MM-DD'), 'Delivered');
INSERT INTO DRUG_ORDERS (SUPPLIER_ID, DRUG_ID, ORDER_DATE, QUANTITY, DELIVERY_DATE, STATUS) VALUES (5, 5, TO_DATE('2025-08-05', 'YYYY-MM-DD'), 100, TO_DATE('2025-08-09', 'YYYY-MM-DD'), 'Delivered');
INSERT INTO DRUG_ORDERS (SUPPLIER_ID, DRUG_ID, ORDER_DATE, QUANTITY, DELIVERY_DATE, STATUS) VALUES (6, 6, TO_DATE('2025-08-06', 'YYYY-MM-DD'), 120, TO_DATE('2025-08-10', 'YYYY-MM-DD'), 'Delivered');
INSERT INTO DRUG_ORDERS (SUPPLIER_ID, DRUG_ID, ORDER_DATE, QUANTITY, DELIVERY_DATE, STATUS) VALUES (7, 7, TO_DATE('2025-08-07', 'YYYY-MM-DD'), 80, TO_DATE('2025-08-11', 'YYYY-MM-DD'), 'Delivered');
INSERT INTO DRUG_ORDERS (SUPPLIER_ID, DRUG_ID, ORDER_DATE, QUANTITY, DELIVERY_DATE, STATUS) VALUES (8, 8, TO_DATE('2025-08-08', 'YYYY-MM-DD'), 200, TO_DATE('2025-08-12', 'YYYY-MM-DD'), 'Delivered');
INSERT INTO DRUG_ORDERS (SUPPLIER_ID, DRUG_ID, ORDER_DATE, QUANTITY, DELIVERY_DATE, STATUS) VALUES (9, 9, TO_DATE('2025-08-09', 'YYYY-MM-DD'), 300, TO_DATE('2025-08-13', 'YYYY-MM-DD'), 'Delivered');
INSERT INTO DRUG_ORDERS (SUPPLIER_ID, DRUG_ID, ORDER_DATE, QUANTITY, DELIVERY_DATE, STATUS) VALUES (10, 10, TO_DATE('2025-08-10', 'YYYY-MM-DD'), 250, TO_DATE('2025-08-14', 'YYYY-MM-DD'), 'Delivered');
INSERT INTO DRUG_ORDERS (SUPPLIER_ID, DRUG_ID, ORDER_DATE, QUANTITY, DELIVERY_DATE, STATUS) VALUES (11, 11, TO_DATE('2025-08-11', 'YYYY-MM-DD'), 100, TO_DATE('2025-08-15', 'YYYY-MM-DD'), 'Delivered');
INSERT INTO DRUG_ORDERS (SUPPLIER_ID, DRUG_ID, ORDER_DATE, QUANTITY, DELIVERY_DATE, STATUS) VALUES (12, 12, TO_DATE('2025-08-12', 'YYYY-MM-DD'), 400, TO_DATE('2025-08-16', 'YYYY-MM-DD'), 'Delivered');
INSERT INTO DRUG_ORDERS (SUPPLIER_ID, DRUG_ID, ORDER_DATE, QUANTITY, DELIVERY_DATE, STATUS) VALUES (13, 13, TO_DATE('2025-08-13', 'YYYY-MM-DD'), 150, TO_DATE('2025-08-17', 'YYYY-MM-DD'), 'Delivered');
INSERT INTO DRUG_ORDERS (SUPPLIER_ID, DRUG_ID, ORDER_DATE, QUANTITY, DELIVERY_DATE, STATUS) VALUES (14, 14, TO_DATE('2025-08-14', 'YYYY-MM-DD'), 500, TO_DATE('2025-08-18', 'YYYY-MM-DD'), 'Delivered');
INSERT INTO DRUG_ORDERS (SUPPLIER_ID, DRUG_ID, ORDER_DATE, QUANTITY, DELIVERY_DATE, STATUS) VALUES (15, 15, TO_DATE('2025-08-15', 'YYYY-MM-DD'), 200, TO_DATE('2025-08-19', 'YYYY-MM-DD'), 'Delivered');

-- PATIENT_ALLERGIES
INSERT INTO PATIENT_ALLERGIES (PATIENT_ID, DRUG_ID, DESCRIPTION) VALUES (1, 1, 'Mild rash');
INSERT INTO PATIENT_ALLERGIES (PATIENT_ID, DRUG_ID, DESCRIPTION) VALUES (2, 2, 'Nausea');
INSERT INTO PATIENT_ALLERGIES (PATIENT_ID, DRUG_ID, DESCRIPTION) VALUES (3, 3, 'Hives');
INSERT INTO PATIENT_ALLERGIES (PATIENT_ID, DRUG_ID, DESCRIPTION) VALUES (4, 4, 'Dizziness');
INSERT INTO PATIENT_ALLERGIES (PATIENT_ID, DRUG_ID, DESCRIPTION) VALUES (5, 5, 'Swelling');
INSERT INTO PATIENT_ALLERGIES (PATIENT_ID, DRUG_ID, DESCRIPTION) VALUES (6, 6, 'Breathing difficulty');
INSERT INTO PATIENT_ALLERGIES (PATIENT_ID, DRUG_ID, DESCRIPTION) VALUES (7, 7, 'Itching');
INSERT INTO PATIENT_ALLERGIES (PATIENT_ID, DRUG_ID, DESCRIPTION) VALUES (8, 8, 'Nausea');
INSERT INTO PATIENT_ALLERGIES (PATIENT_ID, DRUG_ID, DESCRIPTION) VALUES (9, 9, 'Rash');
INSERT INTO PATIENT_ALLERGIES (PATIENT_ID, DRUG_ID, DESCRIPTION) VALUES (10, 10, 'Swelling');
INSERT INTO PATIENT_ALLERGIES (PATIENT_ID, DRUG_ID, DESCRIPTION) VALUES (11, 11, 'Hives');
INSERT INTO PATIENT_ALLERGIES (PATIENT_ID, DRUG_ID, DESCRIPTION) VALUES (12, 12, 'Dizziness');
INSERT INTO PATIENT_ALLERGIES (PATIENT_ID, DRUG_ID, DESCRIPTION) VALUES (13, 13, 'Nausea');
INSERT INTO PATIENT_ALLERGIES (PATIENT_ID, DRUG_ID, DESCRIPTION) VALUES (14, 14, 'Rash');
INSERT INTO PATIENT_ALLERGIES (PATIENT_ID, DRUG_ID, DESCRIPTION) VALUES (15, 15, 'Itching');

-- DRUG_INTERACTIONS
INSERT INTO DRUG_INTERACTIONS (DRUG_ID1, DRUG_ID2, DESCRIPTION) VALUES (1, 4, 'Increased sedation');
INSERT INTO DRUG_INTERACTIONS (DRUG_ID1, DRUG_ID2, DESCRIPTION) VALUES (2, 7, 'Enhanced CNS depression');
INSERT INTO DRUG_INTERACTIONS (DRUG_ID1, DRUG_ID2, DESCRIPTION) VALUES (3, 14, 'Increased bleeding risk');
INSERT INTO DRUG_INTERACTIONS (DRUG_ID1, DRUG_ID2, DESCRIPTION) VALUES (4, 8, 'Increased drowsiness');
INSERT INTO DRUG_INTERACTIONS (DRUG_ID1, DRUG_ID2, DESCRIPTION) VALUES (5, 10, 'Reduced efficacy');
INSERT INTO DRUG_INTERACTIONS (DRUG_ID1, DRUG_ID2, DESCRIPTION) VALUES (6, 14, 'Increased bleeding risk');
INSERT INTO DRUG_INTERACTIONS (DRUG_ID1, DRUG_ID2, DESCRIPTION) VALUES (7, 9, 'Enhanced sedation');
INSERT INTO DRUG_INTERACTIONS (DRUG_ID1, DRUG_ID2, DESCRIPTION) VALUES (8, 4, 'Increased sedation');
INSERT INTO DRUG_INTERACTIONS (DRUG_ID1, DRUG_ID2, DESCRIPTION) VALUES (9, 3, 'Reduced efficacy');
INSERT INTO DRUG_INTERACTIONS (DRUG_ID1, DRUG_ID2, DESCRIPTION) VALUES (10, 14, 'Increased bleeding risk');
INSERT INTO DRUG_INTERACTIONS (DRUG_ID1, DRUG_ID2, DESCRIPTION) VALUES (11, 5, 'Reduced efficacy');
INSERT INTO DRUG_INTERACTIONS (DRUG_ID1, DRUG_ID2, DESCRIPTION) VALUES (12, 14, 'Increased bleeding risk');
INSERT INTO DRUG_INTERACTIONS (DRUG_ID1, DRUG_ID2, DESCRIPTION) VALUES (13, 4, 'Increased sedation');
INSERT INTO DRUG_INTERACTIONS (DRUG_ID1, DRUG_ID2, DESCRIPTION) VALUES (14, 3, 'Reduced efficacy');
INSERT INTO DRUG_INTERACTIONS (DRUG_ID1, DRUG_ID2, DESCRIPTION) VALUES (15, 14, 'Increased bleeding risk');


----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------

-- ===============================================
-- PL/SQL Triggers for Pharmacy Management System
-- ===============================================

-- Trigger 1: Prevent dispensing more than prescribed quantity
CREATE OR REPLACE TRIGGER TRG_CHECK_DISPENSE_QUANTITY
BEFORE INSERT OR UPDATE ON DISPENSATION
FOR EACH ROW
DECLARE
    V_PRESCRIBED_QUANTITY NUMBER;
    V_DAILY_DOSES NUMBER;
    V_DURATION NUMBER;
    V_FREQUENCY VARCHAR2(50);
    E_EXCESS_QUANTITY EXCEPTION;
BEGIN
    -- Retrieve prescription details using IDX_DISPENSATION_PRESCRIPTION_ID
    SELECT 
        P.FREQUENCY,
        (P.END_DATE - P.START_DATE + 1)
    INTO 
        V_FREQUENCY,
        V_DURATION
    FROM PRESCRIPTIONS P
    WHERE P.PRESCRIPTION_ID = :NEW.PRESCRIPTION_ID;

    -- Parse frequency to estimate daily doses
    CASE
        WHEN UPPER(V_FREQUENCY) LIKE '%THRICE DAILY%' THEN V_DAILY_DOSES := 3;
        WHEN UPPER(V_FREQUENCY) LIKE '%TWICE DAILY%' THEN V_DAILY_DOSES := 2;
        WHEN UPPER(V_FREQUENCY) LIKE '%ONCE DAILY%' THEN V_DAILY_DOSES := 1;
        WHEN UPPER(V_FREQUENCY) LIKE '%AS NEEDED%' THEN V_DAILY_DOSES := 1; -- Assumption
        ELSE V_DAILY_DOSES := 1; -- Default
    END CASE;

    -- Calculate prescribed quantity
    V_PRESCRIBED_QUANTITY := V_DURATION * V_DAILY_DOSES;

    -- Check if dispensed quantity exceeds prescribed
    IF :NEW.QUANTITY_ISSUED > V_PRESCRIBED_QUANTITY THEN
        RAISE E_EXCESS_QUANTITY;
    END IF;

EXCEPTION
    WHEN E_EXCESS_QUANTITY THEN
        RAISE_APPLICATION_ERROR(-20020, 'Dispensed quantity exceeds prescribed quantity.');
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20021, 'Prescription not found.');
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20022, 'Error in dispensation: ' || SQLERRM);
END;
/

-- Example 1: TRG_CHECK_DISPENSE_QUANTITY
-- Successful Case: Dispense within prescribed quantity
-- Prescription ID 5: Cyclobenzaprine, Once daily, 2025-09-05 to 2025-09-12 (8 days, 8 doses)
INSERT INTO DISPENSATION (PRESCRIPTION_ID, DISPENSE_DATE, QUANTITY_ISSUED, PHARMACIST_ID)
VALUES (5, TO_DATE('2025-07-14', 'YYYY-MM-DD'), 8, 15);
-- Result: Success, as 8 <= 8 doses

-- Verify
SELECT * FROM DISPENSATION WHERE PRESCRIPTION_ID = 5;

-- Failed Case: Dispense more than prescribed quantity
INSERT INTO DISPENSATION (PRESCRIPTION_ID, DISPENSE_DATE, QUANTITY_ISSUED, PHARMACIST_ID)
VALUES (5, TO_DATE('2025-07-14', 'YYYY-MM-DD'), 50, 15);
-- Result: ORA-20020: Dispensed quantity exceeds prescribed quantity.




-- Trigger 2: Update stock when a new drug order is received
CREATE OR REPLACE TRIGGER TRG_UPDATE_STOCK_ON_ORDER
AFTER INSERT OR UPDATE 
ON DRUG_ORDERS
FOR EACH ROW
WHEN (NEW.STATUS = 'Delivered')
BEGIN
    -- Update stock in DRUGS using IDX_DRUG_ORDERS_DRUG_ID
    UPDATE DRUGS
    SET STOCK_QUANTITY = STOCK_QUANTITY + :NEW.QUANTITY
    WHERE DRUG_ID = :NEW.DRUG_ID;

EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20023, 'Error updating stock: ' || SQLERRM);
END;
/

-- Example 2: TRG_UPDATE_STOCK_ON_ORDER
-- Successful Case: Insert delivered order
INSERT INTO DRUG_ORDERS (SUPPLIER_ID, DRUG_ID, ORDER_DATE, QUANTITY, DELIVERY_DATE, STATUS)
VALUES (1, 1, TO_DATE('2025-07-14', 'YYYY-MM-DD'), 100, TO_DATE('2025-07-14', 'YYYY-MM-DD'), 'Delivered');
-- Result: Stock for Amoxicillin (DRUG_ID = 1) increases by 100

-- Verify
SELECT DRUG_ID, NAME, STOCK_QUANTITY FROM DRUGS WHERE DRUG_ID = 1;


-- Trigger 3: Log failed dispensation attempts due to insufficient stock
CREATE OR REPLACE TRIGGER TRG_LOG_INSUFFICIENT_STOCK
BEFORE INSERT OR UPDATE ON DISPENSATION
FOR EACH ROW
DECLARE
    V_STOCK_QUANTITY NUMBER;
    E_INSUFFICIENT_STOCK EXCEPTION;

    -- Declare autonomous logging procedure as Oracle does not allow COMMIT or ROLLBACK statements inside triggers. 
    -- This is a strict restriction, because commits inside a trigger could interfere with the overall transaction control
    -- leading to partial updates or data inconsistency.
    PROCEDURE log_error(msg VARCHAR2) IS
        PRAGMA AUTONOMOUS_TRANSACTION;
    BEGIN
        INSERT INTO LOG_TABLE (DESCRIPTION, EVENT_DATE)
        VALUES (msg, SYSDATE);
        COMMIT;
    END;
BEGIN
    SELECT D.STOCK_QUANTITY
    INTO V_STOCK_QUANTITY
    FROM PRESCRIPTIONS P
    JOIN DRUGS D ON P.DRUG_ID = D.DRUG_ID
    WHERE P.PRESCRIPTION_ID = :NEW.PRESCRIPTION_ID;

    IF  :NEW.QUANTITY_ISSUED > V_STOCK_QUANTITY THEN
        log_error('Insufficient stock for Dispense ID ' || :NEW.DISPENSE_ID ||
                  ': Needed ' || :NEW.QUANTITY_ISSUED || ', Available ' || V_STOCK_QUANTITY);
        RAISE E_INSUFFICIENT_STOCK; -- handle insufficent stock error
    END IF;

EXCEPTION
    WHEN E_INSUFFICIENT_STOCK THEN
        RAISE_APPLICATION_ERROR(-20027, 'Insufficient stock for dispensation.');
END;
/

-- Example 3: TRG_LOG_INSUFFICIENT_STOCK
-- Failed Case: Dispense more than available stock
-- Drug ID 1: Amoxicillin, STOCK_QUANTITY = 500
INSERT INTO DISPENSATION (PRESCRIPTION_ID, DISPENSE_DATE, QUANTITY_ISSUED, PHARMACIST_ID)
VALUES (5, TO_DATE('2025-07-14', 'YYYY-MM-DD'), 1000, 201);
-- Result: ORA-20027: Insufficient stock for dispensation.

-- Verify log
SELECT * FROM LOG_TABLE WHERE DESCRIPTION LIKE '%Insufficient stock%';



-- Trigger 4: Prevent duplicate drug names
CREATE OR REPLACE TRIGGER TRG_PREVENT_DUPLICATE_DRUG
BEFORE INSERT OR UPDATE ON DRUGS
FOR EACH ROW
DECLARE
    V_COUNT NUMBER;
    E_DUPLICATE_DRUG EXCEPTION;
BEGIN
    -- Check for duplicate drug name
    SELECT COUNT(*)
    INTO V_COUNT
    FROM DRUGS
    WHERE NAME = :NEW.NAME
    AND DRUG_ID != NVL(:NEW.DRUG_ID, -1);

    IF V_COUNT > 0 THEN
        RAISE E_DUPLICATE_DRUG;
    END IF;

EXCEPTION
    WHEN E_DUPLICATE_DRUG THEN
        RAISE_APPLICATION_ERROR(-20030, 'Duplicate drug name not allowed.');
END;
/

-- Example 4: TRG_PREVENT_DUPLICATE_DRUG
-- Failed Case: Insert duplicate drug name
INSERT INTO DRUGS (NAME, CATEGORY_ID, MANUFACTURER_ID, EXPIRY_DATE, UNIT_PRICE, STOCK_QUANTITY)
VALUES ('Ondansetron', 1, 1, TO_DATE('2026-01-01', 'YYYY-MM-DD'), 10.00, 100);
-- Result: ORA-20030: Duplicate drug name not allowed.


-- Trigger 5: Prevent unlicensed suppliers
CREATE OR REPLACE TRIGGER TRG_CHECK_SUPPLIER_LICENSE
BEFORE INSERT OR UPDATE ON SUPPLIERS
FOR EACH ROW
DECLARE
    E_UNLICENSED_SUPPLIER EXCEPTION;
BEGIN
    -- Check for valid license number
    IF :NEW.LICENSE_NUMBER IS NULL OR LENGTH(TRIM(:NEW.LICENSE_NUMBER)) = 0 THEN -- trim for trimming spaces from the both side
        RAISE E_UNLICENSED_SUPPLIER;
    END IF;

EXCEPTION
    WHEN E_UNLICENSED_SUPPLIER THEN
        RAISE_APPLICATION_ERROR(-20032, 'Supplier must have a valid license number.');
END;
/

-- Example 5: TRG_CHECK_SUPPLIER_LICENSE
-- Failed Case: Insert unlicensed supplier
INSERT INTO SUPPLIERS (NAME, CONTACT, EMAIL, LICENSE_NUMBER)
VALUES ('Unlicensed Supplier', '123-456-7890', 'unlicensed@supplier.com', NULL);
-- Result: ORA-20032: Supplier must have a valid license number.



----------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------

-- ===============================================
-- PL/SQL Procedures for Pharmacy Management System
-- ===============================================

-- Procedure to add a prescription while checking for drug interaction or allergy
CREATE OR REPLACE PROCEDURE ADD_PRESCRIPTION (
    P_PATIENT_ID IN NUMBER,
    P_DOCTOR_ID  IN NUMBER,
    P_DRUG_ID    IN NUMBER,
    P_DOSAGE     IN VARCHAR2,
    P_FREQUENCY  IN VARCHAR2,
    P_START_DATE IN DATE,
    P_END_DATE   IN DATE
) AS
    V_ALLERGY_COUNT     NUMBER;
    V_INTERACTION_COUNT NUMBER;
    V_PATIENT_EXISTS    NUMBER;
    V_DOCTOR_EXISTS     NUMBER;
    V_DRUG_EXISTS       NUMBER;
    E_ALLERGY_DETECTED EXCEPTION;
    E_INTERACTION_DETECTED EXCEPTION;
    E_INVALID_DATES EXCEPTION;
    E_EXPIRED_PRESCRIPTION EXCEPTION;
    E_INVALID_PATIENT EXCEPTION;
    E_INVALID_DOCTOR EXCEPTION;
    E_INVALID_DRUG EXCEPTION;
BEGIN
    -- Validate foreign keys
    SELECT COUNT(*) INTO V_PATIENT_EXISTS FROM PATIENTS WHERE PATIENT_ID = P_PATIENT_ID;
    IF V_PATIENT_EXISTS = 0 THEN
        RAISE E_INVALID_PATIENT;
    END IF;

    SELECT COUNT(*) INTO V_DOCTOR_EXISTS FROM DOCTORS WHERE DOCTOR_ID = P_DOCTOR_ID;
    IF V_DOCTOR_EXISTS = 0 THEN
        RAISE E_INVALID_DOCTOR;
    END IF;

    SELECT COUNT(*) INTO V_DRUG_EXISTS FROM DRUGS WHERE DRUG_ID = P_DRUG_ID;
    IF V_DRUG_EXISTS = 0 THEN
        RAISE E_INVALID_DRUG;
    END IF;

    -- Validate dates
    IF P_END_DATE < P_START_DATE THEN
        RAISE E_INVALID_DATES;
    END IF;
    IF P_END_DATE < SYSDATE THEN
        RAISE E_EXPIRED_PRESCRIPTION;
    END IF;

    -- Check for allergies using IDX_PATIENT_ALLERGIES_DRUG_ID
    SELECT COUNT(*)
    INTO V_ALLERGY_COUNT
    FROM PATIENT_ALLERGIES
    WHERE PATIENT_ID = P_PATIENT_ID
    AND DRUG_ID = P_DRUG_ID;

    IF V_ALLERGY_COUNT > 0 THEN
        RAISE E_ALLERGY_DETECTED;
    END IF;

    -- Check for drug interactions with active prescriptions using IDX_PRESCRIPTIONS_DRUG_ID
    SELECT COUNT(*)
    INTO V_INTERACTION_COUNT
    FROM PRESCRIPTIONS P
    JOIN DRUG_INTERACTIONS DI ON (P.DRUG_ID = DI.DRUG_ID1 AND DI.DRUG_ID2 = P_DRUG_ID)
        OR (P.DRUG_ID = DI.DRUG_ID2 AND DI.DRUG_ID1 = P_DRUG_ID)
    WHERE P.PATIENT_ID = P_PATIENT_ID
    AND P.END_DATE >= SYSDATE
    AND P.STATUS = 'Pending';

    IF V_INTERACTION_COUNT > 0 THEN
        RAISE E_INTERACTION_DETECTED;
    END IF;

    -- Insert prescription (PRESCRIPTION_ID is auto-generated by IDENTITY)
    INSERT INTO PRESCRIPTIONS (
        PATIENT_ID,
        DOCTOR_ID,
        DRUG_ID,
        DOSAGE,
        FREQUENCY,
        START_DATE,
        END_DATE,
        STATUS
    ) VALUES (
        P_PATIENT_ID,
        P_DOCTOR_ID,
        P_DRUG_ID,
        P_DOSAGE,
        P_FREQUENCY,
        P_START_DATE,
        P_END_DATE,
        'Pending'
    );

    -- Commit the transaction
    COMMIT;

EXCEPTION
    WHEN E_ALLERGY_DETECTED THEN
        RAISE_APPLICATION_ERROR(-20001, 'Patient is allergic to the prescribed drug.');
    WHEN E_INTERACTION_DETECTED THEN
        RAISE_APPLICATION_ERROR(-20002, 'Drug interaction detected with active prescription.');
    WHEN E_INVALID_DATES THEN
        RAISE_APPLICATION_ERROR(-20003, 'End date must be after start date.');
    WHEN E_EXPIRED_PRESCRIPTION THEN
        RAISE_APPLICATION_ERROR(-20004, 'Prescription end date cannot be in the past.');
    WHEN E_INVALID_PATIENT THEN
        RAISE_APPLICATION_ERROR(-20005, 'Invalid patient ID.');
    WHEN E_INVALID_DOCTOR THEN
        RAISE_APPLICATION_ERROR(-20006, 'Invalid doctor ID.');
    WHEN E_INVALID_DRUG THEN
        RAISE_APPLICATION_ERROR(-20007, 'Invalid drug ID.');
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20008, 'Error adding prescription: ' || SQLERRM);
END;
/

-- ===============================
-- Example 1: ADD_PRESCRIPTION Procedure
-- ===============================
-- Successful Case: Adding a valid prescription
BEGIN
    ADD_PRESCRIPTION(
        P_PATIENT_ID => 2,    -- Srijana Thapa
        P_DOCTOR_ID  => 3,    -- Hari Gurung
        P_DRUG_ID    => 3,    -- Amlodipine (no allergy for Patient 2)
        P_DOSAGE     => '5mg',
        P_FREQUENCY  => 'Once daily',
        P_START_DATE => TO_DATE('2025-07-15', 'YYYY-MM-DD'),
        P_END_DATE   => TO_DATE('2025-08-15', 'YYYY-MM-DD')
    );
END;
/

-- Verify insertion
SELECT * FROM PRESCRIPTIONS WHERE PATIENT_ID = 2 AND DRUG_ID = 3 AND START_DATE = TO_DATE('2025-07-15', 'YYYY-MM-DD');

-- Failed Case: Adding a prescription with an allergy
-- Before: Check PATIENT_ALLERGIES for Patient 1 (allergic to Drug 1: Amoxicillin)
SELECT * FROM PATIENT_ALLERGIES WHERE PATIENT_ID = 1;

BEGIN
    ADD_PRESCRIPTION(
        P_PATIENT_ID => 1,    -- Aarav Shrestha
        P_DOCTOR_ID  => 1,    -- Ramesh Shrestha
        P_DRUG_ID    => 1,    -- Amoxicillin (allergic)
        P_DOSAGE     => '500mg',
        P_FREQUENCY  => 'Twice daily',
        P_START_DATE => TO_DATE('2025-07-15', 'YYYY-MM-DD'),
        P_END_DATE   => TO_DATE('2025-07-25', 'YYYY-MM-DD')
    );
END;
/
-- Result: ORA-20001: Patient is allergic to the prescribed drug.

-- Failed Case: Adding a prescription with invalid doctor
BEGIN
    ADD_PRESCRIPTION(
        P_PATIENT_ID => 2,
        P_DOCTOR_ID  => 999,  -- Non-existent doctor
        P_DRUG_ID    => 3,
        P_DOSAGE     => '5mg',
        P_FREQUENCY  => 'Once daily',
        P_START_DATE => TO_DATE('2025-07-15', 'YYYY-MM-DD'),
        P_END_DATE   => TO_DATE('2025-08-15', 'YYYY-MM-DD')
    );
END;
/
-- Result: ORA-20006: Invalid doctor ID.
-----------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------

-- Procedure to update inventory upon successful dispensation
CREATE OR REPLACE PROCEDURE UPDATE_INVENTORY (
    P_DISPENSE_ID     IN NUMBER,
    P_QUANTITY_ISSUED IN NUMBER
) AS
    V_DRUG_ID        NUMBER;
    V_STOCK_QUANTITY NUMBER;
    V_PRESCRIPTION_STATUS VARCHAR2(20);
    E_INSUFFICIENT_STOCK EXCEPTION;
    E_INVALID_DISPENSE EXCEPTION;
    E_PRESCRIPTION_CANCELLED EXCEPTION;
BEGIN
    -- Validate DISPENSE_ID and prescription status
    SELECT
        P.DRUG_ID,
        D.STOCK_QUANTITY,
        P.STATUS
    INTO
        V_DRUG_ID,
        V_STOCK_QUANTITY,
        V_PRESCRIPTION_STATUS
    FROM
        DISPENSATION DISP
        JOIN PRESCRIPTIONS P ON DISP.PRESCRIPTION_ID = P.PRESCRIPTION_ID
        JOIN DRUGS D ON P.DRUG_ID = D.DRUG_ID
    WHERE
        DISP.DISPENSE_ID = P_DISPENSE_ID;

    -- Check if prescription is cancelled
    IF V_PRESCRIPTION_STATUS = 'Cancelled' THEN
        RAISE E_PRESCRIPTION_CANCELLED;
    END IF;

    -- Check for sufficient stock
    IF V_STOCK_QUANTITY < P_QUANTITY_ISSUED THEN
        RAISE E_INSUFFICIENT_STOCK;
    END IF;

    -- Update stock quantity
    UPDATE DRUGS
    SET STOCK_QUANTITY = STOCK_QUANTITY - P_QUANTITY_ISSUED
    WHERE DRUG_ID = V_DRUG_ID;

    -- Commit the transaction
    COMMIT;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20009, 'Dispensation or related data not found.');
    WHEN E_INSUFFICIENT_STOCK THEN
        RAISE_APPLICATION_ERROR(-20010, 'Insufficient stock for dispensation.');
    WHEN E_PRESCRIPTION_CANCELLED THEN
        RAISE_APPLICATION_ERROR(-20011, 'Cannot dispense: Prescription is cancelled.');
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20012, 'Error updating inventory: ' || SQLERRM);
END;
/

-- ===============================
-- Example 2: UPDATE_INVENTORY Procedure
-- ===============================
-- Successful Case: Dispense a quantity less than or equal to available stock
-- Before: Check stock for Drug 1 (Ondansetron, STOCK_QUANTITY = 390)
SELECT DRUG_ID, NAME, STOCK_QUANTITY FROM DRUGS WHERE DRUG_ID = 1;

BEGIN
    UPDATE_INVENTORY(P_DISPENSE_ID => 1, P_QUANTITY_ISSUED => 10);
END;
/
-- Result: Stock for Amoxicillin reduced by 10 (to 380).

-- Verify stock update
SELECT DRUG_ID, NAME, STOCK_QUANTITY FROM DRUGS WHERE DRUG_ID = 1;

-- Failed Case: Dispense more than available stock
BEGIN
    UPDATE_INVENTORY(P_DISPENSE_ID => 1, P_QUANTITY_ISSUED => 1000);
END;
/
-- Result: ORA-20010: Insufficient stock for dispensation.

-- Failed Case: Invalid DISPENSE_ID
BEGIN
    UPDATE_INVENTORY(P_DISPENSE_ID => 999, P_QUANTITY_ISSUED => 10);
END;
/
-- Result: ORA-20009: Dispensation or related data not found.

--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------

-- ===============================================
-- PL/SQL Function for Pharmacy Management System
-- ===============================================

CREATE OR REPLACE FUNCTION CALCULATE_PRESCRIPTION_COST (
    P_PRESCRIPTION_ID IN NUMBER
) RETURN NUMBER AS
    V_DURATION       NUMBER;
    V_UNIT_PRICE     NUMBER;
    V_DAILY_DOSES    NUMBER;
    V_TOTAL_QUANTITY NUMBER;
    V_TOTAL_COST     NUMBER;
    V_FREQUENCY      VARCHAR2(50);
    V_STATUS         VARCHAR2(20);
    V_START_DATE     DATE;
    V_END_DATE       DATE;
    V_DRUG_NAME      VARCHAR2(100);
    E_NO_DATA        EXCEPTION;
    E_INVALID_STATUS EXCEPTION;
    E_EXPIRED_PRESCRIPTION EXCEPTION;
BEGIN
    -- Retrieve prescription and drug details using IDX_PRESCRIPTIONS_DRUG_ID
    SELECT
        (P.END_DATE - P.START_DATE + 1),
        D.UNIT_PRICE,
        P.FREQUENCY,
        P.STATUS,
        P.START_DATE,
        P.END_DATE,
        D.NAME
    INTO
        V_DURATION,
        V_UNIT_PRICE,
        V_FREQUENCY,
        V_STATUS,
        V_START_DATE,
        V_END_DATE,
        V_DRUG_NAME
    FROM
        PRESCRIPTIONS P
        JOIN DRUGS D ON P.DRUG_ID = D.DRUG_ID
    WHERE
        P.PRESCRIPTION_ID = P_PRESCRIPTION_ID;

    -- Validate prescription status
    IF V_STATUS = 'Cancelled' THEN
        RAISE E_INVALID_STATUS;
    END IF;

    -- Validate prescription is not expired
    IF V_END_DATE < SYSDATE THEN
        RAISE E_EXPIRED_PRESCRIPTION;
    END IF;

    -- Parse frequency to estimate daily doses
    CASE
        WHEN UPPER(V_FREQUENCY) LIKE '%THRICE DAILY%' THEN V_DAILY_DOSES := 3;
        WHEN UPPER(V_FREQUENCY) LIKE '%TWICE DAILY%' THEN V_DAILY_DOSES := 2;
        WHEN UPPER(V_FREQUENCY) LIKE '%ONCE DAILY%' THEN V_DAILY_DOSES := 1;
        WHEN UPPER(V_FREQUENCY) LIKE '%AS NEEDED%' THEN V_DAILY_DOSES := 1; -- Assumption
        ELSE V_DAILY_DOSES := 1; -- Default for unknown frequencies
    END CASE;

    -- Calculate total quantity and cost
    V_TOTAL_QUANTITY := V_DURATION * V_DAILY_DOSES;
    V_TOTAL_COST := V_TOTAL_QUANTITY * V_UNIT_PRICE;

    RETURN V_TOTAL_COST;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20006, 'Prescription or drug not found.');
    WHEN E_INVALID_STATUS THEN
        RAISE_APPLICATION_ERROR(-20007, 'Cannot calculate cost for cancelled prescription.');
    WHEN E_EXPIRED_PRESCRIPTION THEN
        RAISE_APPLICATION_ERROR(-20008, 'Prescription is expired.');
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20009, 'Error calculating prescription cost: ' || SQLERRM);
END;
/

-- ===============================
-- Example: CALCULATE_PRESCRIPTION_COST Function
-- ===============================
-- Successful Case: Calculate cost for an existing prescription
-- Prescription ID 5: Sertraline, 50mg, Once daily, 2025-06-20 to 2025-07-20, UNIT_PRICE = 30.00
SELECT CALCULATE_PRESCRIPTION_COST(5) AS TOTAL_COST FROM DUAL;
-- Expected Output: TOTAL_COST = 400.00 (8 days * 1 dose/day * 50.00)

-- Failed Case: Calculate cost for a cancelled prescription
-- Note: Sample data has no cancelled prescriptions, so insert one for testing
INSERT INTO PRESCRIPTIONS (
    PATIENT_ID, DOCTOR_ID, DRUG_ID, DOSAGE, FREQUENCY, START_DATE, END_DATE, STATUS
) VALUES (
    1, 1, 2, '500mg', 'Once daily', TO_DATE('2025-07-15', 'YYYY-MM-DD'), 
    TO_DATE('2025-07-22', 'YYYY-MM-DD'), 'Cancelled'
);

-- Get the new PRESCRIPTION_ID (e.g., 22, assuming IDENTITY sequence)
SELECT CALCULATE_PRESCRIPTION_COST(41) AS TOTAL_COST FROM DUAL;
-- Result: ORA-20007: Cannot calculate cost for cancelled prescription.

-- Failed Case: Calculate cost for a non-existent prescription
SELECT CALCULATE_PRESCRIPTION_COST(999) AS TOTAL_COST FROM DUAL;
-- Result: ORA-20006: Prescription or drug not found.

-- Failed Case: Calculate cost for an expired prescription
-- Prescription ID 1: Amoxicillin, 2025-06-01 to 2025-06-10 (expired as of 2025-07-14)
SELECT CALCULATE_PRESCRIPTION_COST(61) AS TOTAL_COST FROM DUAL;
-- Result: ORA-20008: Prescription is expired.

--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------

-- ===============================================
-- SQL Queries for Pharmacy Management System
-- ===============================================

-- Query 1: List all drugs set to expire within the next 60 days
-- Uses index on DRUG_ID implicitly via primary key
SELECT
    DRUG_ID,
    NAME AS DRUG_NAME,
    EXPIRY_DATE
FROM
    DRUGS
WHERE
    EXPIRY_DATE <= SYSDATE + 60
    AND EXPIRY_DATE > SYSDATE -- Ensure no already expired drugs
ORDER BY
    EXPIRY_DATE;
-- No data will be view as we have expiry date at

-- Query 2: Retrieve prescriptions that haven’t been dispensed yet
-- Uses index IDX_PRESCRIPTIONS_DRUG_ID and IDX_DISPENSATION_PRESCRIPTION_ID
SELECT
    P.PRESCRIPTION_ID,
    P.PATIENT_ID,
    P.DOCTOR_ID,
    P.DRUG_ID,
    P.DOSAGE,
    P.FREQUENCY,
    P.START_DATE,
    P.END_DATE,
    P.STATUS
FROM
    PRESCRIPTIONS P
    LEFT JOIN DISPENSATION D ON P.PRESCRIPTION_ID = D.PRESCRIPTION_ID
WHERE
    D.DISPENSE_ID IS NULL
    AND P.STATUS = 'Pending'
    AND P.END_DATE >= SYSDATE -- Ensure prescriptions are still valid
ORDER BY
    P.PRESCRIPTION_ID;

-- Query 3: Show top 5 most frequently prescribed medications
-- Uses index IDX_PRESCRIPTIONS_DRUG_ID for join
-- Option 1: Using GROUP BY
SELECT
    D.NAME,
    COUNT(*) AS PRESCRIPTION_COUNT
FROM
    PRESCRIPTIONS P
    JOIN DRUGS D ON P.DRUG_ID = D.DRUG_ID
GROUP BY
    D.NAME
ORDER BY
    PRESCRIPTION_COUNT DESC
FETCH FIRST 5 ROWS ONLY;

-- Option 2: Using PARTITION BY (for comparison)
WITH DRUG_PRESC_COUNT AS (
    SELECT 
        D.NAME,
        COUNT(*) OVER (PARTITION BY D.DRUG_ID) AS PRESCRIPTION_COUNT
    FROM PRESCRIPTIONS P
    JOIN DRUGS D ON P.DRUG_ID = D.DRUG_ID
)
SELECT DISTINCT NAME, PRESCRIPTION_COUNT
FROM DRUG_PRESC_COUNT
ORDER BY
    PRESCRIPTION_COUNT DESC
FETCH FIRST 5 ROWS ONLY;

-- Query 4: List patients who were issued controlled substances
-- Uses index IDX_PRESCRIPTIONS_DRUG_ID for join
SELECT
    PT.PATIENT_ID,
    PT.NAME,
    PT.DOB,
    PT.GENDER,
    PT.CONTACT,
    PT.ADDRESS,
    DC.NAME AS PRESCRIBED_DRUG_CATEGORY
FROM
    PRESCRIPTIONS P
    JOIN PATIENTS PT ON P.PATIENT_ID = PT.PATIENT_ID
    JOIN DRUGS D ON P.DRUG_ID = D.DRUG_ID
    JOIN DRUG_CATEGORIES DC ON D.CATEGORY_ID = DC.CATEGORY_ID
WHERE
    DC.NAME = 'Controlled Substances'
    AND P.STATUS = 'Dispensed' -- Only dispensed prescriptions
ORDER BY
    PT.PATIENT_ID;

-- Query 5: Track drug stock levels and flag when quantity falls below threshold
-- Uses index on DRUG_ID implicitly via primary key
SELECT
    DRUG_ID,
    NAME,
    STOCK_QUANTITY,
    CASE
        WHEN STOCK_QUANTITY < 20 THEN 'LOW STOCK'
        WHEN STOCK_QUANTITY < 100 THEN 'WARNING'
        ELSE 'OK'
    END AS STOCK_STATUS
FROM
    DRUGS
ORDER BY
    STOCK_QUANTITY;

-- Query 6: Display supplier delivery delays (actual vs expected)
-- Uses partitioning on DRUG_ORDERS (ORDER_DATE) and index IDX_DRUG_ORDERS_DRUG_ID
SELECT
    DO.ORDER_ID,
    S.NAME AS "SUPPLIER NAME",
    DO.ORDER_DATE,
    DO.ORDER_DATE + 7 AS "EXPECTED DATE",
    DO.DELIVERY_DATE AS "ACTUAL DATE",
    (DO.DELIVERY_DATE - (DO.ORDER_DATE + 7)) AS "DELAY DAYS"
FROM
         DRUG_ORDERS DO
    JOIN SUPPLIERS S ON S.SUPPLIER_ID = DO.SUPPLIER_ID
WHERE
        DO.STATUS = 'Delivered'
    AND DO.DELIVERY_DATE > DO.ORDER_DATE + 7;

-- Query 7: Show pharmacy revenue generated per drug category
-- Uses indexes IDX_DISPENSATION_PRESCRIPTION_ID and IDX_PRESCRIPTIONS_DRUG_ID
SELECT
    C.CATEGORY_ID,
    C.NAME AS CATEGORY,
    ROUND(SUM(D.UNIT_PRICE * DIS.QUANTITY_ISSUED), 2) AS TOTAL_REVENUE
FROM
    DISPENSATION DIS
    JOIN PRESCRIPTIONS P ON DIS.PRESCRIPTION_ID = P.PRESCRIPTION_ID
    JOIN DRUGS D ON P.DRUG_ID = D.DRUG_ID
    JOIN DRUG_CATEGORIES C ON D.CATEGORY_ID = C.CATEGORY_ID
GROUP BY
    C.CATEGORY_ID,
    C.NAME
ORDER BY
    TOTAL_REVENUE DESC;

-- Query 8: Identify duplicate prescriptions issued within a short time window
-- Uses index IDX_PRESCRIPTIONS_DRUG_ID for join
SELECT
    P1.PATIENT_ID,
    PT.NAME AS PATIENT_NAME,
    P1.DRUG_ID,
    D.NAME AS DRUG_NAME,
    P1.START_DATE,
    P2.START_DATE AS DUPLICATE_DATE
FROM
    PRESCRIPTIONS P1
    JOIN PRESCRIPTIONS P2 ON P1.PATIENT_ID = P2.PATIENT_ID
        AND P1.DRUG_ID = P2.DRUG_ID
    JOIN PATIENTS PT ON P1.PATIENT_ID = PT.PATIENT_ID
    JOIN DRUGS D ON P1.DRUG_ID = D.DRUG_ID
WHERE
    P1.PRESCRIPTION_ID <> P2.PRESCRIPTION_ID -- ensure that prescription _ id is different but prescription is same
    AND ABS(P1.START_DATE - P2.START_DATE) <= 3 -- 3-day window
ORDER BY
    P1.PATIENT_ID, P1.START_DATE;



---------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------

-- ===============================================
-- SQL Optimization for Stock-Level Queries
-- ===============================================

-- Step 1: Original Stock-Level Query
-- Optimized to use index on DRUG_ID (implicit via PRIMARY KEY)
SELECT
    D.DRUG_ID,
    D.NAME,
    D.STOCK_QUANTITY,
    CASE
        WHEN D.STOCK_QUANTITY < 100 THEN 'LOW STOCK'
        WHEN D.STOCK_QUANTITY < 200 THEN 'WARNING'
        ELSE 'OK'
    END AS STOCK_STATUS,
    D.CATEGORY_ID,
    C.NAME AS CATEGORY_NAME
FROM
    DRUGS D
    JOIN DRUG_CATEGORIES C ON D.CATEGORY_ID = C.CATEGORY_ID
WHERE
    D.STOCK_QUANTITY < 200
ORDER BY
    STOCK_QUANTITY;

-- Step 2: EXPLAIN PLAN for Original Query
EXPLAIN PLAN FOR
SELECT
    D.DRUG_ID,
    D.NAME,
    D.STOCK_QUANTITY,
    CASE
        WHEN D.STOCK_QUANTITY < 100 THEN 'LOW STOCK'
        WHEN D.STOCK_QUANTITY < 200 THEN 'WARNING'
        ELSE 'OK'
    END AS STOCK_STATUS,
    D.CATEGORY_ID,
    C.NAME AS CATEGORY_NAME
FROM
    DRUGS D
    JOIN DRUG_CATEGORIES C ON D.CATEGORY_ID = C.CATEGORY_ID
WHERE
    D.STOCK_QUANTITY < 200
ORDER BY
    STOCK_QUANTITY;

-- View EXPLAIN PLAN
SELECT PLAN_TABLE_OUTPUT
FROM TABLE(DBMS_XPLAN.DISPLAY);

-- Step 3: Create Materialized View for Stock Levels
CREATE MATERIALIZED VIEW MV_STOCK_LEVELS
BUILD IMMEDIATE
REFRESH COMPLETE ON COMMIT -- fast was not supporting my query due to limitations in the query structure
ENABLE QUERY REWRITE
AS
SELECT
    D.DRUG_ID,
    D.NAME,
    D.STOCK_QUANTITY,
    CASE
        WHEN D.STOCK_QUANTITY < 100 THEN 'LOW STOCK'
        WHEN D.STOCK_QUANTITY < 200 THEN 'WARNING'
        ELSE 'OK'
    END AS STOCK_STATUS,
    D.CATEGORY_ID,
    C.NAME AS CATEGORY_NAME
FROM
    DRUGS D
    JOIN DRUG_CATEGORIES C ON D.CATEGORY_ID = C.CATEGORY_ID
WHERE
    D.STOCK_QUANTITY < 200;

-- Create index on materialized view for faster queries
CREATE INDEX IDX_MV_STOCK_LEVELS_QUANTITY ON MV_STOCK_LEVELS (STOCK_QUANTITY);

-- Step 4: EXPLAIN PLAN for Query Using Materialized View
EXPLAIN PLAN FOR
SELECT
    DRUG_ID,
    NAME,
    STOCK_QUANTITY,
    STOCK_STATUS
FROM
    MV_STOCK_LEVELS
WHERE
    STOCK_QUANTITY < 100
ORDER BY
    STOCK_QUANTITY;

-- View EXPLAIN PLAN
SELECT PLAN_TABLE_OUTPUT
FROM TABLE(DBMS_XPLAN.DISPLAY);


-- With the help of explain plan we can know that without using materialize view the query is using too much of cpu
-- and materialize view reduces CPU usage during query time (precomputed)


-------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------

-- ===============================================
-- SQL Components for Pharmacy Management System
-- ===============================================

-- Materialized View: Daily Drug Dispensation Summary by Category
CREATE MATERIALIZED VIEW MV_DAILY_DISPENSATION_SUMMARY
BUILD IMMEDIATE
REFRESH COMPLETE ON COMMIT
ENABLE QUERY REWRITE
AS
SELECT
    DC.NAME AS CATEGORY_NAME,
    SUM(D.QUANTITY_ISSUED) AS TOTAL_QUANTITY
FROM
    DISPENSATION D
    JOIN PRESCRIPTIONS P ON D.PRESCRIPTION_ID = P.PRESCRIPTION_ID
    JOIN DRUGS DR ON P.DRUG_ID = DR.DRUG_ID
    JOIN DRUG_CATEGORIES DC ON DR.CATEGORY_ID = DC.CATEGORY_ID
GROUP BY
    DC.NAME;


-- Index on Materialized View for efficient queries
CREATE INDEX IDX_MV_DISPENSATION_DATE ON MV_DAILY_DISPENSATION_SUMMARY (CATEGORY_NAME);

-- Example 1: Query Materialized View for Daily Dispensation Summary
SELECT
    *
FROM
    MV_DAILY_DISPENSATION_SUMMARY
WHERE
    CATEGORY_NAME = 'Antiemetics';
-- Expected: Shows categories like 'Antiemetics' with total dispensed quantities UNTILL NOW



-- Procedure: Generate Alerts for Drugs Approaching Expiry or Low Stock
CREATE OR REPLACE PROCEDURE GENERATE_STOCK_EXPIRY_ALERTS AS
BEGIN
    -- Log drugs with low stock (<20) or approaching expiry (within 60 days)
    INSERT INTO LOG_TABLE (DESCRIPTION, EVENT_DATE)
    SELECT
        'Alert: Drug ' || NAME || ' (ID: ' || DRUG_ID || ') - ' ||
        CASE
            WHEN STOCK_QUANTITY < 20 AND EXPIRY_DATE <= SYSDATE + 60 THEN 'Low stock (' || STOCK_QUANTITY || ') and expiring soon (' || TO_CHAR(EXPIRY_DATE, 'YYYY-MM-DD') || ')'
            WHEN STOCK_QUANTITY < 20 THEN 'Low stock (' || STOCK_QUANTITY || ')'
            WHEN EXPIRY_DATE <= SYSDATE + 60 THEN 'Expiring soon (' || TO_CHAR(EXPIRY_DATE, 'YYYY-MM-DD') || ')'
        END AS DESCRIPTION,
        SYSDATE
    FROM
        DRUGS
    WHERE
        STOCK_QUANTITY < 20 OR EXPIRY_DATE <= SYSDATE + 60;

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20042, 'Error generating alerts: ' || SQLERRM);
END;
/


-- Example 2: Generate Alerts for Low Stock or Expiring Drugs
BEGIN
    GENERATE_STOCK_EXPIRY_ALERTS;
END;
/

-- Verify Alerts
SELECT * FROM LOG_TABLE WHERE DESCRIPTION LIKE '%Alert%';
-- Expected: Alerts for Ibuprofen (STOCK_QUANTITY = 50) and Acyclovir (EXPIRY_DATE = 2025-10-30)

-- Example 4: Test Low Stock Alert
UPDATE DRUGS SET STOCK_QUANTITY = 15 WHERE DRUG_ID = 2; -- Ibuprofen
COMMIT;
BEGIN
    GENERATE_STOCK_EXPIRY_ALERTS;
END;
/
-- Verify: Alert logged for Ibuprofen (LOW STOCK)